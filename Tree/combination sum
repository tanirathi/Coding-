class Solution {
public:

     //helper function to get all combination
    void findCombinations(vector<int>& A, int B, vector<vector<int>>& result, vector<int>& current, int index) {
        if (B == 0) {
            result.push_back(current);
            return;
        }
        
         // Iterate through the array starting from the current index
        for (int i = index; i < A.size(); i++) {
            if (i > index && A[i] == A[i - 1]){
                continue;
            } 
            if (A[i] > B) {   // If the current element is greater than the remaining sum, break the loop
                break;                 
            }
            current.push_back(A[i]);
            findCombinations(A, B - A[i], result, current, i); 
            current.pop_back();
        }
    }

    vector<vector<int>> combinationSum(vector<int>& A, int B) {
        sort(A.begin(), A.end());
        vector<vector<int>> result;  //To store the final combinations
        vector<int> current;      // To store the current combination
        findCombinations(A, B, result, current, 0);   // Initial call to the helper function
        return result;
    }
};
