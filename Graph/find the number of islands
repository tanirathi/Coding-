
class Solution {
public:
    // Function to perform depth-first search (DFS)
    void dfs(vector<vector<int>>& visit, vector<vector<char>>& grid, int i, int j) {
        int n = grid.size(), m = grid[0].size();
        if (i < 0 || i >= n || j < 0 || j >= m) {     // If the current position is out of bounds, return
            return;
        }
        if (visit[i][j] == true) {  // If the current position has already been visited, return
            return;
        }
        if (grid[i][j] == '0') {    // If the current position contains water (grid[i][j] == '0'), return
            return;
        }
        // Mark the current position as visited
        visit[i][j] = true;
        // Recursively call DFS on adjacent positions
        dfs(visit, grid, i + 1, j);
        dfs(visit, grid, i, j + 1);
        dfs(visit, grid, i + 1, j + 1);
        dfs(visit, grid, i + 1, j - 1);
        dfs(visit, grid, i - 1, j + 1);
        dfs(visit, grid, i - 1, j - 1);
        dfs(visit, grid, i - 1, j);
        dfs(visit, grid, i, j - 1);
    }

    // Function to find the number of islands
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size();

        vector<vector<int>> visit(n, vector<int>(m, 0));  // Create a 2D array to keep track of visited positions
        int count = 0;      // Initialize the count of islands

        // Traverse the grid
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {

                if (visit[i][j] == false && grid[i][j] == '1') {   // If the current position has not been visited and contains land ('1')
                    dfs(visit, grid, i, j);        // Perform DFS from this position
                    count++;        // Increment the count of islands
                }
            }
        }
        return count;   
    }
};
