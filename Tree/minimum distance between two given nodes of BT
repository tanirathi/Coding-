
class Solution{
public:
    // Function to find the Lowest Common Ancestor (LCA) of nodes with data 'a' and 'b'
    Node* lca(Node* root,int a,int b){
        if(!root) return NULL;       // If the root is null, return null
        if(root->data == a or root->data == b) return root;  // If the data of the root matches either 'a' or 'b', return the root
        Node* l = lca(root->left, a, b);     // Recursively find LCA in left and right subtrees
        Node* r = lca(root->right, a, b);
        if(l and r) return root;     // If both left and right subtrees return non-null, current root is LCA
        if(l) return l;               // If only left subtree returns non-null, return left subtree result
        return r;                   // If only right subtree returns non-null, return right subtree result
    }
    
    
   
    // Function to find the distance between a node with value 'val' and the root
    int solve(Node* root, int val){
        if(!root) return 0;       // If root is null, return 0
        if(root->data == val) return 1;      // If data of the root matches 'val', return 1
        
        // Recursively find 'val' in left and right subtrees
        int a = solve(root->left, val);
        int b = solve(root->right, val);
        if(!a and !b) return 0;      // If 'val' is not found in both subtrees, return 0
        else return a + b + 1;       // If 'val' is found in either subtree, return the sum of both subtrees + 1
    }
   
   
    // Function to find the distance between nodes with values 'a' and 'b' in the tree
    int findDist(Node* root, int a, int b){

        Node* LCA = lca(root, a, b);    // Find the Lowest Common Ancestor (LCA) of nodes 'a' and 'b'
        int x = solve(LCA, a);         // Find the distance from LCA to node 'a' and node b
        int y = solve(LCA, b); 
        return x + y - 2;               // Return the sum of distances from LCA to 'a' and 'b' subtracted by 2
    }
};

   
