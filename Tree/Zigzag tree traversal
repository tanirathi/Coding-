
vector<int> findSpiral(Node *root) {
    vector<int> result; 
    if (root == nullptr) return result; 
    if (root->left == nullptr && root->right == nullptr) { // If the root has no children
        result.push_back(root->data);                  // Add the root's data to the result
        return result;
    }

    stack<Node*> s1;           // Create a stacks to hold nodes for one level and next level
    stack<Node*> s2;

    s1.push(root);            
    while (!s1.empty() || !s2.empty()) {            // While there are nodes in either stack
        while (!s1.empty()) {                         // Process all nodes in the first stack
            Node* temp = s1.top();                           // Get the top node
            s1.pop(); 
            result.push_back(temp->data);                     // Add the node's data to the result

            if (temp->right != nullptr) s2.push(temp->right);           // Push the right child to the second stack if it exists
            if (temp->left != nullptr) s2.push(temp->left); 
        }
        
        while (!s2.empty()) {                    // Process all nodes in the second stack
            Node* temp = s2.top(); 
            s2.pop(); 
            result.push_back(temp->data);                // Add the node's data to the result

            if (temp->left != nullptr) s1.push(temp->left); 
            if (temp->right != nullptr) s1.push(temp->right); 
        }
    }
    return result; 
}
