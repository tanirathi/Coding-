class Solution {
public:
    string decodeString(string st){
        stack<string> s;                                     // Stack to store strings
        stack<int> num;                                        // Stack to store repeat counts
        string ans = "";                                       // Resulting decoded string
        for (int i = 0; i < st.length(); i++) {
            if (isdigit(st[i])){                                   // If current character is a digit
                int count = 0;
                while (i < st.length() && isdigit(st[i])) {                // Extract the whole number
                    count = count * 10 + (st[i] - '0');
                    i++;
                }
                i--;                                       // Move back one position to correct for loop increment
                num.push(count);                  // Push the repeat count onto the stack
            } 
            else if (st[i] == '['){                // If current character is '['
                s.push(ans);                     // Push the current ans onto the stack
                ans = "";                       // Reset ans to empty string for inner decoding
            }  
            else if (st[i] == ']'){ // If current character is ']'
                int repeatCount = num.top(); // Get the repeat count from the stack
                num.pop();                    // Pop the repeat count from the stack
                string temp = s.top(); // Get the previous decoded string from stack
                s.pop();                   // Pop the previous decoded string from stack
                for (int j = 0; j < repeatCount; j++) { // Repeat the previous decoded string
                    temp += ans;
                }
                ans = temp;                       // Update ans with the repeated string
            } 
            else{                             // If current character is a letter
                ans += st[i];            // Append the letter to the result string
            }
        }
        return ans;
    }
};
