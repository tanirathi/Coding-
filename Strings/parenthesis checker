class Solution {
    public:
    // Function to check if the given string of parentheses is valid
    bool ispar(string str) {
        stack<char> temp;  // Stack to hold opening parentheses
        
        for(int i = 0; i < str.length(); i++) {  // Iterate through each character in the string
            if (temp.empty()) {        // If the stack is empty, push the current character
                temp.push(str[i]);
            }
            else if ((temp.top() == '(' && str[i] == ')') ||      // Check for matching pairs of parentheses
                     (temp.top() == '{' && str[i] == '}') ||
                     (temp.top() == '[' && str[i] == ']')) {
                temp.pop();  // Pop the top of the stack if it's a matching pair
            }
            else {                       // If not a matching pair, push the current character
                temp.push(str[i]);
            }
        }
        return temp.size() == 0;         // If the stack is empty, the parentheses are valid
    }
};
