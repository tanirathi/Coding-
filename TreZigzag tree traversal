class Solution{
public:
    // Function to store the zigzag order traversal of tree in a list.
    vector<int> zigZagTraversal(Node* root)
    {
        vector<int> ans;         // Initialize vector to store traversal result
        queue<Node*> q;              // Initialize queue 
        if(!root)                  // If root is null, return empty result
            return ans;
        q.push(root);                 // Push root into the queue
        int f = 1;        // Flag to indicate direction of traversal, 1 for left to right, 0 for right to left
        while(!q.empty())         // Continue traversal until queue is empty
        {
            vector<int> temp;    // Temporary vector to store nodes at current level
            int sz = q.size();      // Get the number of nodes at current level
            while(sz--)            // Traverse nodes at current level
            {
                Node* t = q.front();                  // Get front node of the queue
                temp.push_back(t->data);            // Push data of current node into temporary vector
                q.pop();                         // Pop the front node from the queue
                if(t->left)                      // If left child of current node exists, push it into the queue
                    q.push(t->left);
                if(t->right)                     // If right child of current node exists, push it into the queue
                    q.push(t->right);
            }
            if(f%2 == 0)           // If flag is even, reverse the temporary vector to change traversal direction
                reverse(temp.begin(), temp.end());
            for(int i = 0; i < temp.size(); i++)        // Push elements of temporary vector into result vector
                ans.push_back(temp[i]);
            f = !f;                        // Toggle flag for next level traversal
        }
        return ans;  
    }
};
