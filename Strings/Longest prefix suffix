class Solution {
public:
    
    int lps(string s) {   // Function to find the length of the longest proper prefix which is also a suffix
        int n = s.size();  
        
        for(int i = 1; i < n; ++i)    
            if(s[0] == s[i])      // Check if the first character matches the character at index 'i'
               if(s.substr(0, n - i) == s.substr(i))   // Check if the substring from start to 'n-i' is equal to the substring from 'i' to end
                   return n - i; 
        return 0;   // If no such prefix-suffix exists, return 0
    }
};
