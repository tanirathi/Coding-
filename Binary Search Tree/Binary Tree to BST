
class Solution{
public:
    
    //  function to perform inorder traversal of a binary tree and store the result in a vector
    void inorder_tree(Node* root, vector<int> &v){
        if(!root) return;
        inorder_tree(root->left, v);
        v.push_back(root->data);
        inorder_tree(root->right, v);
    }
    
    // function to convert a binary tree to a binary search tree (BST)
    void inorder_bst(Node* root, vector<int> v, int &i){
        if(!root) return;
        inorder_bst(root->left, v, i);
        root->data = v[i];
        i++;
        inorder_bst(root->right, v, i);
    }
    
    
    // Function to convert a binary tree to a binary search tree (BST)
    Node *binaryTreeToBST (Node *root)
    {
        
        vector<int> v;    // Store the elements of the binary tree in a vector in sorted order
        inorder_tree(root, v);
        sort(v.begin(), v.end()); // Sort the vector to get the elements in ascending order
        int i = 0;      // Initialize index to 0
        inorder_bst(root, v, i);     // Convert the binary tree to a BST using inorder traversal
         
        return root;
    }
};
